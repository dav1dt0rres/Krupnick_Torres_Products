



<head>

</head>
<body>


<div class="new-year" id="time_x" name="time_x"><span ></span> </div>


<input type="hidden" id="Tag_Holder" name="Tag_Holder" value="{{Tag_Holder}}"  />
<input type="hidden" id="Passage_Expand_bool" name="Passage_Expand_bool" value="{{Passage_Expand_bool}}"  />
<input type="hidden" id="pause_bool" name="pause_bool" value="{{pause_bool}}"  />
<input type="hidden" id="hover_history" name="hover_history" value="{{hover_history}}"  />
<input type="hidden" id="draw_history" name="draw_history" value="{{draw_history}}"  />
<input type="hidden" id="Test_Both_Holder" name="Test_Both_Holder" value="{{Test_Both_Holder}}"  />

<input type="hidden" id="Passage_Holder" name="Passage_Holder" value="{{Passage_Holder}}"  />
<div class="Correct_Answer" align="left" style="margin-left: 55px;" id="Correct_Answer" name="Correct_Answer" value="{{Correct_Answer}}"></div>




    <div id="container" class="container">

        <canvas id='canvas' width='1200' height='1000'></canvas>

    </div>







</body>

<form id ="form" action="/dashboard/Question_Loop"  method="get">
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <input type="hidden" id="Combo_Holder" name="Combo_Holder" value="{{Combo_Holder}}"  />
    <input type="hidden" id="Final_Questions_holder" name="Final_Questions_holder" value="{{Final_Questions_holder}}"  />
    <input type="hidden" id="Database_Index" name="Database_Index" value="{{Database_Index}}"  />
    <input type="hidden" id="Tag" name="Tag" value="{{Tag}}"  />
    <input type="hidden" id="Right_Answer" name="Right_Answer" value="{{Right_Answer}}"  />
    <input type="hidden" id="number_checks" name="number_checks" value="{{number_checks}}"  />

    <input type="hidden" id="Question_Number" name="Question_Number" value="{{Question_Number}}"  />
    <div id="container_1" class="container_1">
        <div class="Tag_Display" id="Tag_Display" name="Tag_Display"><span ></span> </div>


        <h4 class="Question_Body_Display" id="Question_Body_Display" name="Question_Body_Display"  ></h4>


    <p  onmouseleave="leavingOption('A')" onclick= "clickedOption('paraA')" onmouseenter="recordHover('A')" for="Answer_A" id="paraA_1" name="Answer_A" >
        A.)
        <span onmouseleave="leavingOption('A')" onmouseenter="recordHover('A')" id="paraA" >{{Answer_A}} </span>

    </p>
    <p onmouseleave="leavingOption('B')" onclick= "clickedOption('paraB')" onmouseenter="recordHover('B')" for="Answer B" id="paraB_1" >
        B.)
        <span onmouseleave="leavingOption('B')" onmouseenter="recordHover('B')" id="paraB" >{{Answer_B}} </span>

    </p>
    <p onmouseleave="leavingOption('C')" onclick= "clickedOption('paraC')" onmouseenter="recordHover('C')" for="Answer_C" id="paraC_1">
        C.)
        <span onmouseleave="leavingOption('C')" onmouseenter="recordHover('C')" id="paraC" >{{Answer_C}} </span>

    </p>
    <p onmouseleave="leavingOption('D')" onclick= "clickedOption('paraD')" onmouseenter="recordHover('D')" for="Answer_D" id="paraD_1">
        D.)
        <span onmouseleave="leavingOption('D')" onmouseenter="recordHover('D')" id="paraD" >{{Answer_D}} </span>

    </p>
    <p onmouseleave="leavingOption('E')" onclick= "clickedOption('paraE')" onmouseenter="recordHover('E')" for="Answer_E" id="paraE">
        E.)
        <span onmouseleave="leavingOption('E')" onmouseenter="recordHover('E')" id="paraE_1" >{{Answer_E}} </span>

    </p>

    <select onmouseenter="recordHover('sroll_down')" id="combo" name="combo" name="combo">
        <option value="A">A</option>
        <option value="B">B</option>
        <option value="C">C</option>
        <option value="D">D</option>
        <option disabled selected value> -- select an option -- </option>
    </select>
        <select  onchange="finalsubmit()" style="display: none;" id="confidence" name="confidence">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option disabled selected value> -- select a Confidence Score-- </option>
        </select>
        <button id="checkanswer" type="button" onclick="checkCorrectAnswer()" >Check if Correct</button>

        <a id="backwards_question" name="backwards_question" onclick="submit_1(-1)" class="previous round">&#8249;</a>
        <a id="next_question" name="next_question" onclick="submit_1(1)" class="next round">&#8250;</a>
        <div id="confidence_tool" class="tooltip"  style="display: none;" >
            <span id="confidence_input" class="tooltiptext">Please Select a Confidence Score</span>
        </div>


        <input type="hidden" id="Time_Limit_Holder" name="Time_Limit_Holder" value="{{Time_Limit_Holder}}"  />
        <ul onmouseenter="recordHover('bottom_buttons')" class= "btn-group-bottom" id ="btn-group-ul" name="btn-group-ul" >


        </ul>
    </div>

    <ul id="main_menu" class="menu_1">

        <li title="home"><a href="#" id="menu_1-button_home" class="menu_1-button home">menu</a></li>
        <li title="Tagged Questions"><a href="#" id="menu_1-button_tag" class="search"></a></li>
        <li title="Highlighter"><a href="#" id="pencil" onclick="PEN.tool_of()" class="pencil"></a></li>
        <li title="Display Hints"><a href="#" id="menu_1-button_hint" class="active about"></a></li>
        <li ><a href="#" >Clear all Lines</a></li>
    </ul>

    <ul id="menu_1-bar" class="menu_1-bar">
        <li ><a onclick="HomeFunction()" >Home</a></li>
        <li id="pause" onclick="PauseFunction()" ><a >Pause</a></li>
        <li><a onclick="Mark_the_Question()">Mark the Question</a></li>


    </ul>
    <ul id="tagged_question_list" class="menu_1-bar">


    </ul>
    <ul id="pencil_draw" class="menu_1-bar">
        <li onclick="PEN.clear()"><a href="#" >Clear all Lines</a></li>

    </ul>
    <ul id="hints" class="menu_1-bar">

        <li onclick="giveFirstHint()"><a href="#" >Display 1st Hint</a></li>
        <li onclick="maskedMode()" ><a href="#">Masked Mode</a></li>
        <li onclick="optionEliminateMode()"><a href="#">Take away Choices</a></li>

    </ul>

    <input type="hidden" id="Eliminated_Answers" name="Eliminated_Answers" value="{{Eliminated_Answers}}"  />
    <input type="hidden" id="CheckBox_List" name="CheckBox_List" value="{{CheckBox_List}}"  />
    <input type="hidden" id="Question_Body_Holder" name="Question_Body_Holder" value="{{Question_Body_Holder}}"  />
    <input type="hidden" id="Total_Time_Holder" name="Total_Time_Holder" value="{{Total_Time_Holder}}"  />
    <input type="hidden" id="time" name="time" value="{{time}}"  />
    <input type="hidden" id="normal_Question_Index" name="normal_Question_Index" value="{{normal_Question_Index}}"  />
    <input type="hidden" id="Question_Length" name="Question_Length" value="{{Question_Length}}"  />
    <input type="hidden" id="tagged_Questions_holder" name="tagged_Questions_holder" value="{{tagged_Questions_holder}}"  />
    <input type="hidden" id="First_Hint_holder" name="First_Hint_holder" value="{{First_Hint_holder}}"  />
    <input type="hidden" id="Presentation_Holder" name="Presentation_Holder" value="{{Presentation_Holder}}"  />
    <input type="hidden" id="Eliminate_bool" name="Eliminate_bool" value="{{Eliminate_bool}}"  />
    <input type="hidden" id="Masked_bool" name="Masked_bool" value="{{Masked_bool}}"  />
    <input type="hidden" id="Exit_bool" name="Exit_bool" value="{{Exit_bool}}"  />
</form>


<script type="text/javascript">
    function finalsubmit(){

        document.getElementById("form").submit()
    }
    function submit_1(argument){
        //console.log("Inside submit" + document.getElementById("CheckBox_List").value)



        if(parseInt(document.getElementById("normal_Question_Index").value)+argument<0){
            return;
        }
        var xhr_1 = new window.XMLHttpRequest();
        xhr_1.ontimeout = function () {
            console.error("The request for " + " timed out.");
        };
        xhr_1.timeout = 500;
        xhr_1.open('POST', '/dashboard/Question_Loop_1',true);
        xhr_1.setRequestHeader('Content-Type', 'application/json');
        console.log("inititation the json object "+document.getElementById("normal_Question_Index").value );
        var data = JSON.stringify({'Hover_history':document.getElementById("hover_history").value,"Database_Index":document.getElementById("Database_Index").value});
        xhr_1.send(data);




        console.log("normal question "+document.getElementById("normal_Question_Index").value)
        document.getElementById("normal_Question_Index").value=(parseInt(document.getElementById("normal_Question_Index").value)+argument).toString()
        console.log("normal question "+document.getElementById("normal_Question_Index").value)
        var x = document.getElementById("confidence_tool");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }

        console.log("Inside submit!!!!!!!!!!!!!!!" + document.getElementById("CheckBox_List").value.includes('Clues'));
        if(document.getElementById("CheckBox_List").value.includes('Clues')){
            x=document.getElementById("confidence");
            x.style.display = "block";
            x=document.getElementById("checkanswer");
            x.style.display = "none";

        }
        else{
            document.getElementById("form").submit()
        }
    }

    function passage_box_expand(){
        if(document.getElementById("Passage_Expand_bool").value=="true"){
            document.getElementById("container_1").style.display="block";
            document.getElementById("Passage_Box").style.width = "600px"
            document.getElementById("backdrop").style.width = "600px"
            document.getElementById("Passage_Expand_bool").value="false"
        }
        else{
            document.getElementById("Passage_Box").value=document.getElementById("Passage_Box").value.replace( /[\r\n]+/gm, "" );
            document.getElementById("highlights").innerHTML=document.getElementById("highlights").innerHTML.replace( /[\r\n]+/gm, "" )
            document.getElementById("container_1").style.display="none";
            document.getElementById("Passage_Box").style.width = "1100px"
            document.getElementById("backdrop").style.width = "1100px"
            document.getElementById("backdrop").style.height = "605px"
            document.getElementById("Passage_Box").style.height = "590px"
            document.getElementById("Passage_Expand_bool").value="true"
        }

    }
    function recordHover(argument){

        var list_of_events=document.getElementById("hover_history").value.split(",");
        list_of_events.push(argument)
        if(argument=='A' || argument=='B'|| argument=='C'|| argument=='D'){
            console.log("inside the highlighting the choice "+argument)
            if(document.getElementById("Eliminate_bool").value=="true"){
                document.getElementById("para"+argument).style.textDecoration = "line-through";

            }

            else{
                document.getElementById("para"+argument).style.backgroundColor="#C0C0C0"
            }

        }
        document.getElementById("hover_history").value=list_of_events.join(",")
        //console.log("Hover history: "+document.getElementById("hover_history").value);

    }
    function leavingOption(argument){
        console.log("leaving "+argument)
        if(document.getElementById("Eliminate_bool").value=="true"){
            document.getElementById("para"+argument).style.textDecoration = "none";
        }

        else{
            document.getElementById("para"+argument).style.backgroundColor="white"
        }

    }

    function clickedOption(element){
        var list=["paraA","paraB","paraC","paraD","paraE"]
        if(document.getElementById("Eliminate_bool").value=="true"){
            document.getElementById(element).style.textDecoration ="line-through";
            document.getElementById("Eliminated_Answers").value=document.getElementById("Eliminated_Answers").value+","+element;
            document.getElementById("html").style.cursor = "default";
            document.getElementById("Eliminate_bool").value="false"
            return;
        }
        else if(document.getElementById("Masked_bool").value=="true"){
            console.log("Para print out "+"para"+element)
            document.getElementById(element).style.visibility="visible"

        }
        for(var i=0;i<list.length;++i){
            console.log("comparing "+list[i].localeCompare(element))
            if (list[i].localeCompare(element)==0){
                document.getElementById(element).style.color = "DodgerBlue";
            }
            else{
                document.getElementById(list[i]).style.color = "black";
            }
        }
        console.log("Choosing "+element[element.length-1])
        document.getElementById("combo").value = element[element.length-1];
    }
    function HomeFunction(){
        console.log("inside exit bool")
        document.getElementById("Exit_bool").value="true"
        document.getElementById("form").submit()
    }
    function PauseFunction(){

        if(document.getElementById("pause_bool").value=="true"){
            console.log("inside pause function "+document.getElementById("pause_bool").value)
            document.getElementById("pause_bool").value="false"
            document.getElementById("pause").innerText="Pause"

        }
        else if(document.getElementById("pause_bool").value=="false"){
            console.log("inside pause function "+document.getElementById("pause_bool").value)
            document.getElementById("pause_bool").value="true";
            document.getElementById("pause").innerText="Continue"

        }

    }
    function startTotalTime(){
        console.log("includes sample "+document.getElementById("Question_Body_Holder").value)
        if(document.getElementById("Question_Body_Holder").value.includes("Sample")){
            return;
        }
        var duration=document.getElementById("Total_Time_Holder").value.toString()
        if(parseInt(duration.split(":")[0])==0){
            return;
        }
        console.log("duration "+ parseInt(duration.split(":")[0])+" "+parseInt(duration.split(":")[1]))
        var countDownDate = new Date(Date.parse(new Date()) +   parseInt(duration.split(":")[0]) * 60*1000+(parseInt(duration.split(":")[1])*1000) );

        console.log("Timer "+countDownDate)
        var display = document.querySelector('#Total_Time');//Display
        var time_value=document.querySelector('#Total_Time_Holder')
        var interval=setInterval(function () {
            // console.log("Repeating "+document.getElementById("pause_bool").value)
            if(document.getElementById("pause_bool").value=="false"){
                var now = new Date().getTime();

                // Find the distance between now and the count down date
                var distance = countDownDate - now;

                // Time calculations for days, hours, minutes and seconds

                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                // Display the result in the element with id="demo"
                console.log("finalTime:"+minutes + "m " + seconds + "s ");
                time_value.value=minutes +":"+seconds
                display.textContent= minutes + "m " + seconds + "s "
            }
        }, 1000);

    }
    function startTimer(duration, display,time) {
        console.log("Duration "+duration)
        if (duration.length==0){
            return;
        }
        var timer = duration, minutes, seconds;
        var interval=setInterval(function () {
            console.log("Repeating "+document.getElementById("pause_bool").value)
            if(document.getElementById("pause_bool").value=="false"){
                minutes = parseInt(timer / 60, 10)
                seconds = parseInt(timer % 60, 10);

                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;


                display.textContent = minutes + ":" + seconds;
                time.value=minutes + ":" + seconds;
                console.log("time value "+time.value)
                if (--timer < 0) {
                    console.log("inside a minute")

                    if(forceChange()){
                        clearInterval(interval);
                        return true;
                    }
                    display.style.fontSize = "2em";
                    display.style.color="red"
                    //time.css({ 'color': 'red', 'font-size': '150%'})
                    //clearInterval(interval);


                }
            }
        }, 1000);


    }
    function maskedMode(){
        if(document.getElementById("Masked_bool").value =="true"){//true
            document.getElementById("Masked_bool").value ="false";
            document.getElementById("paraA").style.visibility = "visible";
            document.getElementById("paraB").style.visibility = "visible";
            document.getElementById("paraC").style.visibility = "visible";
            document.getElementById("paraD").style.visibility = "visible";


        }
        else {
            document.getElementById("paraA").style.visibility= "hidden";
            document.getElementById("paraB").style.visibility = "hidden";
            document.getElementById("paraC").style.visibility = "hidden";
            document.getElementById("paraD").style.visibility = "hidden";
            document.getElementById("Masked_bool").value ="true"
        }
    }
    function optionEliminateMode(){
        if(document.getElementById("Eliminate_bool").value == "true"){
            document.getElementById("Eliminate_bool").value ="false";
            document.getElementById("html").style.cursor = "default";
            return;
        }
        console.log("Inside option eliminate mode")
        //document.getElementById("container_1").style.cursor = "wait"
        document.getElementById("html").style.cursor = "wait";

        document.getElementById("Eliminate_bool").value = "true";
        //document.getElementById("paraA").style.textDecorationThickness = "0.2rem";
    }
    function forceChange(){

        if (document.getElementById("CheckBox_List").value.indexOf("True")>=0){
            //console.log("before "+document.getElementById("normal_Question_Index").value)

            document.getElementById("normal_Question_Index").value=(parseInt(document.getElementById("normal_Question_Index").value)+1).toString()
            //console.log("after "+document.getElementById("normal_Question_Index").value)
            document.getElementById("form").submit()
            return true;
        }
        return false;
    }
    function loadbuttonsV2(center){
        var buttonGroup=document.getElementById("btn-group")

        buttonGroup.name="button-group"
        for (var i=4;i>0;--i){
            var new_button = document.createElement('button');
            var less= (center)-i
            var string=less.toString();
            new_button.innerHTML=string;
            new_button.value=string
            new_button.onclick=async function(event) {

                document.getElementById("normal_Question_Index").value=this.value
                console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
                submit()

            }

            buttonGroup.appendChild(new_button)

        }
        var center= (center)
        var string="(Currently)"+center.toString();
        var new_button = document.createElement('button')
        new_button.innerHTML=string;
        new_button.value=string
        new_button.onclick=async function(event) {

            document.getElementById("normal_Question_Index").value=this.value
            console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
            submit()

        }
        buttonGroup.appendChild(new_button)
        for(var i=1;i<4;++i){
            var new_button = document.createElement('button');
            var more=(center)+i
            string=more.toString();
            new_button.innerHTML=string;
            new_button.value=string
            new_button.onclick=async function(event) {

                document.getElementById("normal_Question_Index").value=this.value
                console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
                submit()

            }

            buttonGroup.appendChild(new_button)
        }
    }
    function loadButtonsBottom(){
        var targetLi;
        var ul=document.getElementById("btn-group-ul");
        //console.log("Response: "+document.getElementById("Time_Limit_Holder").value)
        //var index=document.getElementById("normal_Question_Index").value
        if(document.getElementById("Final_Questions_holder").value.split(",").length>1){

            for (var i=0;i<parseInt(document.getElementById("Final_Questions_holder").value.split(",").length);++i){
                //console.log("each question in finals review "+document.getElementById("Final_Questions_holder").value.split(",")[i].split(" ")[0])

                var li=document.createElement("LI");
                li.className="final_review"
                console.log("    preparring red buttons..."+document.getElementById("Final_Questions_holder").value.split(",")[i].split(";")[0])
                var number=document.getElementById("Final_Questions_holder").value.split(",")[i].split(";")[0]
                li.innerText=number.toString()
                li.value=number.toString()

                li.onclick=async function(event) {

                    //document.getElementById("normal_Question_Index").value=(parseInt(this.value)).toString()
                    document.getElementById("Final_Questions_holder").value=(parseInt(this.value)).toString()
                    console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
                    submit_1()

                }
                li.onmouseover=async function recordHover_1(event){
                    console.log("inside recording Hover")
                    recordHover(this.value)
                }
                ul.appendChild(li);
            }

            if(document.getElementById("Time_Limit_Holder").value.length==0){
                console.log("exiting ")
                return;
            }
            console.log("Coloring the responses "+"para"+document.getElementById("Time_Limit_Holder").value)
            console.log("Coloring the responses "+"para"+document.getElementById("Right_Answer").value)
            var e = document.getElementById("para"+document.getElementById("Time_Limit_Holder").value);
            e.style.backgroundColor="#CB5C56";
            var correct=document.getElementById("para"+document.getElementById("Right_Answer").value);
            if(correct!=undefined){
                correct.style.backgroundColor="#75E17A"
            }

          //this actually contains the response the User submitted

            return;
        }
        for (var i=0;i<parseInt(document.getElementById("Question_Length").value);++i){
            if(i==parseInt(document.getElementById("normal_Question_Index").value)){
                console.log("changing this button's COLOR "+i)
                var li=document.createElement("LI");
                li.className="highlighted"
                //li.innerText=i.toString()
                li.value=i.toString()
                li.id="center"

                li.onclick=async function(event) {

                    document.getElementById("normal_Question_Index").value=(parseInt(this.value)).toString()
                    console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
                    submit_1(0)

                }


            }
            else{
                var li=document.createElement("LI");

                //li.innerText=i.toString()
                li.value=i.toString()
                li.onclick=async function(event) {

                    document.getElementById("normal_Question_Index").value=(parseInt(this.value)).toString()
                    console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
                    submit_1(0);
                }
            }


            ul.appendChild(li);
            if (li.id=='center'){
                document.getElementById("center").scrollIntoView();
                window.scrollTo(0,0);

            }

        }

        //
    }
    function loadbuttons(){

        var buttonGroup=document.getElementById("btn-group")

        buttonGroup.name="button-group"

        var temp_list=document.getElementById("Final_Questions_holder").value.split(",")
        if(temp_list.length>1){

            for (var i=1;i<temp_list.length;++i){
                console.log("Button Numbesr that are Incorrect"+" "+temp_list[i])
                new_button = document.createElement('button');

                new_button.innerHTML=temp_list[i].toString();
                new_button.value=temp_list[i].toString();
                new_button.onclick=async function(event) {

                    document.getElementById("Final_Questions_holder").value=this.value

                    document.getElementById("form").submit()

                }

                buttonGroup.appendChild(new_button)
            }

            return;
        }
        //var index=document.getElementById("Question_Number").value
        var index=document.getElementById("normal_Question_Index").value
        console.log("loading buttons "+index)

        //console.log("header " +header.value + ' '+header.innerText)
        if(parseInt(index)==6){
            console.log("Inside of 7 button")
            loadbuttonsV2(7);
            return;
        }
        if(parseInt(index)<7){
            console.log("inside less than 7")
            for (var i=1;i<8;++i){
                new_button = document.createElement('button');
                if(i==parseInt(index)){
                    new_button.className="current_index"
                }
                new_button.innerHTML=i.toString();
                new_button.value=i.toString();
                new_button.onclick=async function(event) {

                    document.getElementById("normal_Question_Index").value=(parseInt(this.value)-1).toString()

                    document.getElementById("form").submit()

                }

                buttonGroup.appendChild(new_button)
                console.log("Length of children"+" "+document.getElementById("header").children.length)
                console.log("Length of children"+" "+buttonGroup.children.length)
            }
            return;
        }

        for (var i=4;i>0;--i){
            new_button = document.createElement('button');
            var less= (parseInt(index)+1)-i
            string=less.toString();
            new_button.innerHTML=string;
            new_button.value=string
            new_button.onclick=async function(event) {

                document.getElementById("normal_Question_Index").value=(parseInt(this.value)-1).toString()
                console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
                document.getElementById("form").submit()

            }

            buttonGroup.appendChild(new_button)

        }
        var center= (parseInt(index)+1)
        var string="(Currently)"+center.toString();
        var new_button = document.createElement('button')
        new_button.innerHTML=string;
        new_button.value=string
        new_button.onclick=async function(event) {

            document.getElementById("normal_Question_Index").value=(parseInt(this.value)-1).toString()
            console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
            document.getElementById("form").submit()

        }
        buttonGroup.appendChild(new_button)

        for(var i=1;i<4;++i){
            new_button = document.createElement('button');
            var more=(parseInt(index)+1)+i
            string=more.toString();
            new_button.innerHTML=string;
            new_button.value=string
            new_button.onclick=async function(event) {

                document.getElementById("normal_Question_Index").value=(parseInt(this.value)-1).toString()
                console.log('clicked BUTTON_index '+document.getElementById("normal_Question_Index").value);
                document.getElementById("form").submit()

            }

            buttonGroup.appendChild(new_button)
        }

        //document.getElementById("header").appendChild(buttonGroup)
        console.log("button chidlren "+document.getElementById("header").children.length)
    }
    function loadQuestionBody(){
        var question=document.getElementById("Question_Body_Holder");

        var display=document.getElementById("Question_Body_Display");
        display.innerHTML=question.value
    }
   function loadTaggedQuestions(){

        var TaggedList=document.getElementById("tagged_Questions_holder").value.split(",")

        var ul=document.getElementById("tagged_question_list");

        for (var i=0;i<TaggedList.length;++i){
            var li=document.createElement("LI");
           // li.className="tagged_icon"
            li.innerText=TaggedList[i]
            li.value=i
            li.onclick=async function(event) {

                document.getElementById("tagged_Questions_holder").value=this.value
                console.log('clicked!!!! '+submit());

            }

            ul.appendChild(li);
        }

    }
    function loadEliminatedAnswers(){
        console.log("Eliminated_ANswers: "+document.getElementById("Eliminated_Answers").value.replace(/ /g,''))

        if (document.getElementById("Eliminated_Answers").value.replace(/ /g,'').length==0){
            return;
        }
        var eliminated_list=document.getElementById("Eliminated_Answers").value.replace(/\s/g,'').split(",")
        for (var i=0;i<eliminated_list.length;++i){
           console.log("letter "+eliminated_list[i])
            if(eliminated_list[i].length>0){
                document.getElementById(eliminated_list[i]).style.textDecoration='line-through'
            }

        }
    }

    function loadMisc(){
        document.getElementById("combo").value= document.getElementById("Combo_Holder").value
        if(document.getElementById("Combo_Holder").value.length>0){

            document.getElementById("para"+document.getElementById("Combo_Holder").value).style.color="DodgerBlue";
        }


    }
    function checkCorrectAnswer(){
        var e = document.getElementById("combo");
        var answer = e.options[e.selectedIndex].value;

        if (answer ==document.getElementById("Right_Answer").value){
            console.log("Right Answer "+ answer+" "+document.getElementById("Right_Answer").value)
            document.getElementById("Correct_Answer").style.color="blue";
            document.getElementById("Correct_Answer").style.fontSize="xx-large";
            document.getElementById("Correct_Answer").innerHTML="Correct!";
            document.getElementById("number_checks").value=(parseInt(document.getElementById("number_checks").value)+1).toString()
            //await sleep(2000);
            //document.getElementById("tagged_Questions_holder").value=this.value
            //console.log('clicked!!!! '+document.getElementById("form").submit());

        }
        else{
            console.log("Incorrect Answer! "+ "para"+answer+" "+document.getElementById("Right_Answer").value)
            document.getElementById("Correct_Answer").innerHTML="Incorrect...";
            document.getElementById("Correct_Answer").style.fontSize="xx-large";
            document.getElementById("number_checks").value=(parseInt(document.getElementById("number_checks").value)+1).toString()
            document.getElementById("para"+answer).style.display="none";
            document.getElementById("Presentation_Holder").value=document.getElementById("Presentation_Holder").value+","+answer;
            console.log("number of checks"+" "+ document.getElementById("number_checks").value)
            //await sleep(2000);
            //document.getElementById("tagged_Questions_holder").value=this.value
            //console.log('clicked!!!! '+document.getElementById("form").submit());

        }
    }

    function showPresentationHighlight(){
        console.log("Inside presentation highlight")
        var myArr=[]
        var Count=0;
        var highlighted_text=document.getElementById("Presentation_Holder").value.split(" ")
        for(var i=0;i<highlighted_text.length;++i){
            highlighted_text[i]=highlighted_text[i].replace("*","")
        }

        console.log("PResentation highlight: "+highlighted_text)
        var text_list=document.getElementById("Passage_Holder").value.split(" ")
        var question_number=(parseInt(document.getElementById("normal_Question_Index").value)+1).toString()
        for (var i=0;i<text_list.length;++i){
          // console.log(text_list[i]);


            if(text_list[i].replace(/\n/g, '')=='['+question_number+']'){
                console.log("Found iT!!!!!: "+highlighted_text)
                for (var j=0;j<highlighted_text.length;++j){
                    var text_word=text_list[i-j].replace(/\n/g, '').replace(/\*/g, '').replace(/\s/g, '')
                    console.log("comparing "+text_word)
                    if (highlighted_text.includes(text_word)){
                        //console.log("Accepting "+text_word)
                        myArr.push(i-j)
                    }
                }

                break;


            }

        }
        console.log("myArray going in_Red "+myArr)



        document.getElementById("highlights").innerHTML=applyHighlights(document.getElementById("Passage_Holder").value.split(" "),myArr)

    }

    function new_ShowBlackUnderLines(){
        var text_list=document.getElementById("Passage_Holder").value.split(" ")
        var underlined_sections=[]
        var i=0;
        var temp_text=text_list.join(" ");
        var question_number;
        if (document.getElementById("Test_Both_Holder").value.includes('Set')){
            //console.log("the test is set of problems, so setting number different "+document.getElementById("Test_Both_Holder").value.split(";"))
            question_number=(parseInt(document.getElementById("Test_Both_Holder").value.split(";")[1])).toString()
        }
        else{
            question_number=(parseInt(document.getElementById("normal_Question_Index").value)+1).toString()
        }
        while(i<text_list.length-1){
            if (text_list[i].replace('*', '').includes('*')){///if the asteriks are only one word
                console.log("Found ONLY one: "+text_list[i].replace(/\n/g, ''))


                underlined_sections.push(text_list[i].replace(/\n/g, ''))



                //myArr.push(i)
            }
            else if(text_list[i].replace(/\n/g, '').includes('*')){

                //console.log("Found first one: "+text_list[i].replace(/\n/g, ''));
                underlined_sections.push(text_list[i].replace(/\n/g, ''))

                var j=1;
                while(text_list[i+j].replace(/\n/g, '').includes('*')==false){


                    underlined_sections.push(text_list[i+j].replace(/\n/g, ''))

                    ++j;
                    if(j>100){
                        break;
                    }
                }
                //console.log("Found second one: "+text_list[i+j].replace(/\n/g, ''))


                   underlined_sections.push(text_list[i+j].replace(/\n/g, ''))


                //console.log("underlined "+underlined_section)
                //temp_text=temp_text.replace(/\n$/g, '\n\n').replace(underlined_section, '<underline_black>$&</underline_black>')


                i=i+j
            }
            console.log("looking for asterksik...");
            ++i;
        }


        var join_underlined_section="";
        var flag=true;
        for (var i=0;i<underlined_sections.length;++i){
            console.log("Checking "+underlined_sections[i])
            if(underlined_sections[i].replace('*', '').includes('*')){
                var index=temp_text.indexOf(underlined_sections[i])
                console.log("SINGLE UNDERLINE "+underlined_sections[i]+" index: "+index)
                temp_text=temp_text.substring(0,index)+"<span class='underline_black'>" + temp_text.substring(index,index+underlined_sections[i].length)+"</span>"+temp_text.substring(index+underlined_sections[i].length)
                join_underlined_section="";
            }
            else if(underlined_sections[i].includes("*")){
                if(flag){
                    //its the first asterisk
                    flag=false;
                    join_underlined_section="";
                    join_underlined_section=underlined_sections[i];
                }
                else{
                    //its the second one
                    join_underlined_section=join_underlined_section+" "+underlined_sections[i];

                    flag=true;


                    var index=temp_text.indexOf(join_underlined_section)
                    console.log("UNDERLINED SECTION "+join_underlined_section+" index: "+index)
                    if(index>=0){
                        temp_text=temp_text.substring(0,index)+"<span class='underline_black'>" + temp_text.substring(index,index+join_underlined_section.length)+ "</span>"+temp_text.substring(index+join_underlined_section.length)
                    }

                    join_underlined_section="";

                }
            }
            else{
                join_underlined_section=join_underlined_section+" "+underlined_sections[i]
            }


            //temp_text=temp_text.replace(/\n$/g, '\n\n').replace(underlined_sections[i], '<underline>$&</underline>')
        }

        return temp_text;

    }

    function new_HighlightedHTMLPassage(){
        var text_list=document.getElementById("Passage_Holder").value.split(" ")
        console.log("showHTMLPASSAGE "+document.getElementById("Test_Both_Holder").value)
        var i=0;
        var myArr=[]
        var highlighted_text=document.getElementById("Presentation_Holder").value.split(" ")
        var temp_text=text_list.join(" ")
        var underlined_section=""
        var question_number;
        if (document.getElementById("Test_Both_Holder").value.includes('Set')){
            //console.log("the test is set of problems, so setting number different "+document.getElementById("Test_Both_Holder").value.split(";"))
            question_number=(parseInt(document.getElementById("Test_Both_Holder").value.split(";")[1])).toString()
        }
        else{
            question_number=(parseInt(document.getElementById("normal_Question_Index").value)+1).toString()
        }

        for(var i=0;i<highlighted_text.length;++i){
            if(highlighted_text[i].length==0){
                highlighted_text.splice(i, 1)
            }
            else{
                highlighted_text[i]=highlighted_text[i].replace("*","").replace("*","")
            }

        }
        i=0;
        console.log("highlighted Text "+highlighted_text);
        var para = document.createElement("p");
        para.setAttribute("align","left")
        //para.style.left = "100px"
        para.style.marginLeft="55px"
        para.innerHTML=document.getElementById("Passage_Holder").value.replace(/\n/g, '<br>\n');;
        para.style.font = "italic 20px arial,serif";


        //HIGHLIGHTS
        var innerHTML;


        var text_joined=highlighted_text.join(" ")
        console.log("TEXT JOINED:"+text_joined);





        innerHTML=new_ShowBlackUnderLines().replace(/\n/g, '<br>\n');

        var index = innerHTML.indexOf(text_joined);
        if (index >= 0) {
                console.log("TEXT FOUDN TO HILGIHTS "+text_joined);
                innerHTML = innerHTML.substring(0,index) + "<span class='highlight'>" + innerHTML.substring(index,index+text_joined.length) + "</span>" + innerHTML.substring(index + text_joined.length);
                para.innerHTML = innerHTML;
        }

        document.getElementById("container").appendChild(para);
        //console.log(innerHTML)
    }
    function showBlackUnderlines(){
        var text_list=document.getElementById("Passage_Holder").value.split(" ")
        console.log("show black underlines "+document.getElementById("Test_Both_Holder").value)
        var i=0;
        var myArr=[]
        var highlighted_text=document.getElementById("Presentation_Holder").value.split(" ")
        var temp_text=text_list.join(" ")
        var underlined_section=""
        var question_number;
        if (document.getElementById("Test_Both_Holder").value.includes('Set')){
            //console.log("the test is set of problems, so setting number different "+document.getElementById("Test_Both_Holder").value.split(";"))
            question_number=(parseInt(document.getElementById("Test_Both_Holder").value.split(";")[1])).toString()
        }
        else{
            question_number=(parseInt(document.getElementById("normal_Question_Index").value)+1).toString()
        }

        for(var i=0;i<highlighted_text.length;++i){
            highlighted_text[i]=highlighted_text[i].replace("*","").replace("*","")
        }
        i=0;
        console.log("highlighted Text "+highlighted_text)
       while(i<text_list.length){

            console.log(text_list[i].replace(/\n/g, ''))
           if(text_list[i].replace(/\n/g, '')=='['+question_number+']'){//the red underlined, looks for the present [number]
                console.log("Found the Red Number ")
               for (var j=1;j<highlighted_text.length;++j){
                   var text_word=text_list[i-j].replace(/\n/g, '').replace(/\*/g, '').replace(/\s/g, '')
                   console.log("comparing_Red "+text_word)
                   if (highlighted_text.includes(text_word)){
                       console.log("Accepting_Red "+text_word)
                       myArr.push(i-j)
                   }

               }

               for (var x=myArr.length-1;x>=0;--x) {


                   underlined_section = underlined_section+" "+text_list[myArr[x]]
                   console.log("Highlighting_Red so far:" + underlined_section);

               }

               temp_text=temp_text.replace(/\n$/g, '\n\n').replace(underlined_section, '<underline>$&</underline>')


           }
           else if (text_list[i].replace('*', '').includes('*')){///if the asteriks are only one word
               //console.log("Found ONLY one: "+text_list[i].replace(/\n/g, ''))
               if(text_list[i+1].replace(/\n/g, '')=='['+question_number+']'){
                   underlined_section=""
               }
               else{
                   underlined_section = text_list[i].replace(/\n/g, '')
               }

               temp_text=temp_text.replace(/\n$/g, '\n\n').replace(underlined_section, '<underline_black>$&</underline_black>')
               //myArr.push(i)
           }
           else if(text_list[i].replace(/\n/g, '').includes('*')){

                //console.log("Found first one: "+text_list[i].replace(/\n/g, ''))
                underlined_section = text_list[i].replace(/\n/g, '')
                var j=1;
                while(text_list[i+j].replace(/\n/g, '').includes('*')==false){


                    underlined_section = underlined_section+" "+text_list[i+j].replace(/\n/g, '')

                    ++j;
                    if(j>100){
                        break;
                    }
                }
              // console.log("Found second one: "+text_list[i+j].replace(/\n/g, ''))
                if(text_list[i+j+1].replace(/\n/g, '')=='['+question_number+']'){
                    underlined_section=""
                }
                else{
                    underlined_section = underlined_section+" "+text_list[i+j].replace(/\n/g, '')
                }

               //console.log("underlined "+underlined_section)
               temp_text=temp_text.replace(/\n$/g, '\n\n').replace(underlined_section, '<underline_black>$&</underline_black>')


                i=i+j
            }

            i=i+1;
           underlined_section=""
        }

        document.getElementById("highlights").innerHTML=temp_text
        return temp_text

    }
    function giveFirstHint(){
        console.log("inside give firstHint")
       // var popup = document.getElementById("myPopup");
      //  popup.innerText="This should be a description of Method/Tag. Also display the way to do it in a sentence."
       // popup.classList.toggle("show");
        var Tag_Holder = document.getElementById("Tag_Holder");
        document.getElementById("Tag_Display").innerHTML=Tag_Holder.value
        //console.log("First Hint Text "+ document.getElementById("First_Hint_holder").value)
        const set1 = new Set([]);
        var Count=0;
        var highlighted_text=document.getElementById("First_Hint_holder").value.split(" ")
        console.log("First Hint Text as a list: "+highlighted_text)
        var text_list=document.getElementById("Passage_Holder").value.split(" ")
        for (var i=0;i<text_list.length;++i){
            //console.log("comparing "+ text_list[i])
            if (highlighted_text.includes(text_list[i].replace(/\n/g, '')) && text_list[i].length>0 ){

                //console.log("includes"+" "+text_list[i]+Count)
                ++Count;
                if(Count>3){
                    set1.add(i-4)
                    set1.add(i-3)
                    set1.add(i-2)
                    set1.add(i-1)
                    set1.add(i)

                }
            }
            else{
                Count=0;
            }

        }
        var myArr = Array.from(set1)

        document.getElementById("First_Hint_holder").value=["true"];
        console.log("Hint now holding..."+" "+document.getElementById("First_Hint_holder").value)
        document.getElementById("highlights").innerHTML=applyHighlights(document.getElementById("Passage_Box").value.split(" "),myArr)
    }
    function applyHighlights(text_list,myArr){

        var temp_text="";
        var initial=0;
        var underlined_section=""
        temp_text=text_list.join(" ")

        for (var i=myArr.length-1;i>=0;--i) {
            console.log("Highlighting " + text_list[myArr[i]]);

            underlined_section = underlined_section+" "+text_list[myArr[i]]
            //temp_text = temp_text + " " + '<u>add</u>'
            //initial = myArr[i]
            //temp_text=temp_text.replace(/\n$/g, '\n\n').replace(text_list[myArr[i]], '<mark>$&</mark>')
            //temp_text=temp_text.replace(/\n$/g, '\n\n').replace(text_list[myArr[i]], '<underline>$&</underline>')
           // console.log("Highlighted section so far " + underlined_section);

        }

        temp_text=temp_text.replace(/\n$/g, '\n\n').replace(underlined_section, '<underline>$&</underline>')

        //return text.replace(/\n$/g, '\n\n').replace(/[A-Z].*?\b/g, '<mark>$&</mark>')

        //console.log("Temp TExt COmplte "+temp_text)
        return temp_text; //should always return a string
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    function scrollFunction(){

        console.log("INside the scroll callback (Height) "+" "+document.getElementById("Passage_Box").scrollTop)
        document.getElementById("backdrop").scrollTop=document.getElementById("Passage_Box").scrollTop;
        recordHover('scrolling '+document.getElementById("Passage_Box").scrollTop)
    }
    function scrollFunction_2(){
        console.log("INside the scroll callback (Height) "+" "+document.getElementById("highlights").scrollTop)
        document.getElementById("backdrop").scrollTop=document.getElementById("highlights").scrollTop;
        recordHover('scrolling '+document.getElementById("Passage_Box").scrollTop)
    }
    function centerButtons(){




    }
    function Pen(new_context) {


        var tool = this;
        var context = new_context;
        this.final_points=[];
        this.started = false;
        this.Off=0;//off
        var move_count = 0;
        context.lineWidth = 2;
        context.lineJoin = 'round';
        context.lineCap = 'round';
        var lastx = 0;
        var lasty = 0;
        // create an in-memory canvas
        var memCanvas = document.createElement('canvas');
        memCanvas.width = 900;
        memCanvas.height = 1000;
        var memCtx = memCanvas.getContext('2d');
        this.points = [];
        this.context=context;
        if(document.getElementById("draw_history").value.length>0){
            console.log("No draw history in object Pen")
            context.clearRect(0, 0, 900, 900);
            // put back the saved content
            context.drawImage(memCanvas, 0, 0);
            this.context=displayHighlighter(context)
        }


        this.mousedown = function(ev) {
            console.log("mousDOWN "+tool.Off)
            if(tool.Off==1){//highlighter

                console.log("inside mousedown ")
                tool.points.push({
                    x: ev._x,
                    y: ev._y
                });
                tool.started = true;
            }
            else if(tool.Off==2){//regular ink
                console.log("inside mousedown")
                tool.points.push({
                    x: ev._x,
                    y: ev._y
                });
                tool.started = true;
            }

        };

        this.mousemove = function(ev) {
            if (tool.started) {
                if(tool.Off==1){
                    //tool.context.clearRect(0, 0, 900, 900);
                    // put back the saved content
                    tool.context.drawImage(memCanvas, 0, 0);
                    tool.points.push({
                        x: ev._x,
                        y: ev._y
                    });

                    console.log("point "+ev._x+" "+ev._y)

                    tool.final_points.push({x:ev._x,y:ev._y});
                    drawHighlighter(tool.context,tool.points)
                    return;
                }


                console.log("inside mousemove")
                context.clearRect(0, 0, 900, 900);
                // put back the saved content
                context.drawImage(memCanvas, 0, 0);
                tool.points.push({
                    x: ev._x,
                    y: ev._y
                });
                context.lineWidth = 2;
                context.lineJoin = 'round';
                context.lineCap = 'round';
                context.strokeStyle = 'rgba(0,0,0,1)';
                drawPoints(context, tool.points);
            }
        };

        this.mouseup = function(ev) {
            if (tool.started) {
                tool.started = false;
                // When the pen is done, save the resulting context
                // to the in-memory canvas
                if(tool.Off==1){
                    var data = JSON.stringify({'Draw_Object':tool.final_points,"Database_Index":document.getElementById("Database_Index").value});
                    var xhr = new window.XMLHttpRequest();
                    xhr.open('POST', '/dashboard/Question_Loop_1',true);
                    xhr.ontimeout = function () {
                        console.error("The request for " + " timed out.");
                    };
                    xhr.timeout = 500;
                    xhr.setRequestHeader('Content-Type', 'application/json');
                    console.log("length of poitns bein sent: "+tool.final_points.length);
                    xhr.send(data);
                }

                memCtx.clearRect(0, 0, 900, 900);
                memCtx.drawImage(canvas, 0, 0);
                tool.points = [];
                tool.final_points=[]
            }
        };
        this.tool_of=function(){
            console.log("Setting up mode ")
            if(tool.Off==0){
                tool.Off=1;//higlighter
                document.getElementById("html").style.cursor = "crosshair";
            }
            else if(tool.Off==1){
                tool.Off=2;//pencil
                document.getElementById("html").style.cursor = "cell";

            }
            else{
                tool.Off = 0;//OFF
                document.getElementById("html").style.cursor = "initial";
            }

        }
        // clear both canvases!

        this.clear = function() {
            console.log("inside clear");
            document.getElementById("draw_history").value="";
            context.clearRect(0, 0, 900, 900);
            memCtx.clearRect(0, 0, 900, 900);

        };
    }
    function ev_canvas(ev) {
        if (false) {
            ev._x = ev.touches[0].clientX;
            ev._y = ev.touches[0].clientY; // CH: Is there a better way to do this?
        }
        else if (ev.layerX || ev.layerX == 0) { // Firefox
            ev._x = ev.layerX;
            ev._y = ev.layerY;
        }
        else if (ev.offsetX || ev.offsetX == 0) { // Opera
            ev._x = ev.offsetX;
            ev._y = ev.offsetY;
        }

        ev._x = ev._x + 0.5;
        //ev._y = ev._y + 0.5;
        // Call appropriate event handler
        var func = PEN[ev.type];
        if (func) {
            func(ev);
        }
    }
    function displayHighlighter(ctx){//Calls the element by ID draw history from string to list of tuples and passes the points list
        var temp_list=document.getElementById("draw_history").value.split(" ");
        var  points=[];
        var final_points_display=[]
        console.log("length of draw display "+temp_list[0])
        console.log("length of draw display "+temp_list[1])
        for(var i=0;i<temp_list.length;++i){
            for(var j=0;j<temp_list[i].split(",").length;++j){
                console.log("POINTS "+temp_list[i].split(",")[j].split("*")[0]+" : "+temp_list[i].split(",")[j].split("*")[1])
                points.push({x:temp_list[i].split(",")[j].split("*")[0],y:temp_list[i].split(",")[j].split("*")[1]});
            }
            final_points_display.push(points);
            points=[];
            console.log("NEXT LIST OF POINTS")

        }

            ctx.lineWidth = 9;
            ctx.lineJoin = 'round';
            ctx.lineCap = 'round';
            ctx.strokeStyle = 'rgba(0,0,255, 0.4)';
            //ctx.globalAlpha = 0.2
        for(var i=0;i<final_points_display.length;++i){
            ctx=drawPoints(ctx,final_points_display[i])
        }
        return ctx;


        //drawHighlighter()
    }
    function drawHighlighter(ctx,points){
        console.log("inside drawHighlighter_bLUE")

        ctx.lineWidth = 2;
        ctx.lineJoin = 'round';
        ctx.lineCap = 'round';
        ctx.strokeStyle = 'rgba(255,0,0, 0.1)';
        //ctx.globalAlpha = 0.2
        drawPoints(ctx,points)

    }
    function drawPoints(ctx, points) {


        if (points.length < 6) return;
        if (points.length < 6) {
            var b = points[0];
            ctx.beginPath(), ctx.arc(b.x, b.y, ctx.lineWidth / 2, 0, Math.PI * 2, !0), ctx.closePath(), ctx.fill();
            return
        }
        ctx.beginPath(), ctx.moveTo(points[0].x, points[0].y);
        for (i = 1; i < points.length - 2; i++) {
            //console.log("Drawing the folowing points "+points[i].x+" "+points[i].y)
            var c = (points[i].x + points[i + 1].x) / 2,
                    d = (points[i].y + points[i + 1].y) / 2;
            ctx.quadraticCurveTo(points[i].x, points[i].y, c, d)
        }
        ctx.quadraticCurveTo(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y), ctx.stroke()
        return ctx;
    }
    window.onload = function () {
        var canvas = document.getElementById('canvas');

        PEN = new Pen(canvas.getContext('2d'));


        canvas.addEventListener('mousedown', ev_canvas, false);
        canvas.addEventListener('mousemove', ev_canvas, false);
        canvas.addEventListener('mouseup', ev_canvas, false);
        console.log("inside load")
        document.addEventListener("click", function mainFunction(event) {
                    console.log("inside main function "+event.target.id.toString())
                    if(event.target.id.toString()=="menu_1-button_home" || event.target.id.toString()=="menu_1-button_tag" || event.target.id.toString()=="menu_1-button_hint" )
                    {
                        console.log("Clicked inside menus")
                    }
                    else{
                        console.log("Clicked outside")
                        var element = document.getElementById("tagged_question_list").className="menu_1-bar";

                        // element.classList.toggle("close");
                        element = document.getElementById("hints").className="menu_1-bar";

                        // element.classList.toggle("close");
                        element = document.getElementById("menu_1-bar").className="menu_1-bar";
                        element = document.getElementById("pencil_draw").className="menu_1-bar";
                    }

                }
        );

        console.log("Time Limit detected "+document.getElementById("Time_Limit_Holder").value)
        document.getElementById("Exit_bool").value="false"
        document.getElementById("pause_bool").value="false"
        var duration = document.getElementById("Time_Limit_Holder").value
        //var duration = 60 * (1/4),
        var display = document.querySelector('#time_x');
        var time_value=document.querySelector('#time')
        startTotalTime();
        startTimer(duration, display,time_value);
        document.getElementById("menu").style.display="block";
       //loadTaggedQuestions();
        //loadWeaknessQuestions();
        loadQuestionBody();
        //loadbuttons();
        loadButtonsBottom();
        centerButtons();
        loadMisc();
        loadEliminatedAnswers();
        if(document.getElementById("Masked_bool").value =="true"){//true

            document.getElementById("paraA").style.visibility = "hidden";
            document.getElementById("paraB").style.visibility = "hidden";
            document.getElementById("paraC").style.visibility = "hidden";
            document.getElementById("paraD").style.visibility = "hidden";


        }
// console.log("inside passage box"+document.getElementById("Passage_Box").textContent)
        //console.log("Print First"+" "+y)]


        document.getElementById("number_checks").value=(0).toString()
        //document.getElementById("Passage_Box").value=document.getElementById("Passage_Holder").value

        //showBlackUnderlines();
        new_HighlightedHTMLPassage();
        //new_ShowBlackUnderLines();
        //clear the presentaiton holder in order to hold check answers list
        document.getElementById("Presentation_Holder").value="";

        classname=document.getElementById("menu_1-button_home");

        classname.addEventListener("mouseenter",function(){
            console.log("inside toggle class-0")
            var element = document.getElementById("menu_1-bar");
            element.classList.toggle("open") });


        classname=document.getElementById("pencil");

        classname.addEventListener("mouseenter",function(){
            console.log("inside toggle class-0")
            var element = document.getElementById("pencil_draw");
            element.classList.toggle("open") });



        classname=document.getElementById("menu_1-button_tag");
        classname.addEventListener("mouseenter",function(){
            console.log("event lister for tagge questions-1")
            var element = document.getElementById("tagged_question_list");
            element.classList.toggle("open") });


        classname=document.getElementById("menu_1-button_hint");
        classname.addEventListener("mouseenter",function(){
            console.log("event lister for tagge questions-2")
            var element = document.getElementById("hints");
            element.classList.toggle("open") });
    };

</script>